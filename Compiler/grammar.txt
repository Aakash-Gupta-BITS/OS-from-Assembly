45 34 79 45
eps
TK_CLASS
TK_CONSTRUCTOR
TK_FUNCTION
TK_METHOD
TK_FIELD
TK_STATIC
TK_VAR
TK_INT
TK_CHAR
TK_BOOLEAN
TK_VOID
TK_TRUE
TK_FALSE
TK_NULL
TK_THIS
TK_LET
TK_DO
TK_IF
TK_ELSE
TK_WHILE
TK_RETURN
TK_CURO
TK_CURC
TK_PARENO
TK_PARENC
TK_BRACKO
TK_BRACKC
TK_DOT
TK_COMMA
TK_SEMICOLON
TK_PLUS
TK_MINUS
TK_MULT
TK_DIV
TK_AND
TK_OR
TK_LE
TK_GE
TK_EQ
TK_NOT
TK_NUM
TK_STR
TK_IDENTIFIER
TK_EOF
class
class_vars
subroutineDecs
class_var
class_var_prefix
type
more_identifiers
subroutineDec
subroutine_prefix
subroutine_type
parameters
more_parameters
subroutine_body
routine_vars
routine_var
statements
statement
let_statement
identifier_suffix
if_statement
else_statement
while_statement
do_statement
return_statement
return_suffix
expression
expression_suffix
term
term_sub_iden
op
subroutine_call
subroutine_scope
expression_list
more_expressions
class TK_CLASS TK_IDENTIFIER TK_CURO class_vars subroutineDecs TK_CURC TK_EOF
class_vars class_var class_vars
class_vars eps
subroutineDecs subroutineDec subroutineDecs
subroutineDecs eps
class_var class_var_prefix type TK_IDENTIFIER more_identifiers TK_SEMICOLON
class_var_prefix TK_STATIC
class_var_prefix TK_FIELD
type TK_INT
type TK_CHAR
type TK_BOOLEAN
type TK_IDENTIFIER
more_identifiers TK_COMMA TK_IDENTIFIER more_identifiers
more_identifiers eps
subroutineDec subroutine_prefix subroutine_type TK_IDENTIFIER TK_PARENO parameters TK_PARENC subroutine_body
subroutine_prefix TK_CONSTRUCTOR
subroutine_prefix TK_FUNCTION
subroutine_prefix TK_METHOD
subroutine_type type
subroutine_type TK_VOID
parameters TK_IDENTIFIER more_parameters
parameters eps
more_parameters TK_COMMA TK_IDENTIFIER more_parameters
more_parameters eps
subroutine_body TK_CURO routine_vars statements TK_CURC
routine_vars routine_var routine_vars
routine_vars eps
routine_var TK_VAR type TK_IDENTIFIER more_identifiers TK_SEMICOLON
statements statement statements
statements eps
statement let_statement
statement if_statement
statement while_statement
statement do_statement
statement return_statement
let_statement TK_LET TK_IDENTIFIER identifier_suffix TK_EQ expression TK_SEMICOLON
identifier_suffix eps
identifier_suffix TK_BRACKO expression TK_BRACKC
if_statement TK_IF TK_PARENO expression TK_PARENC TK_CURO statements TK_CURC else_statement
else_statement eps
else_statement TK_ELSE TK_CURO statements TK_CURC
while_statement TK_WHILE TK_PARENO expression TK_PARENC TK_CURO statements TK_CURC
do_statement TK_DO subroutine_call TK_SEMICOLON
return_statement TK_RETURN return_suffix TK_SEMICOLON
return_suffix eps
return_suffix expression
expression term expression_suffix
expression_suffix op term expression_suffix
expression_suffix eps
term TK_NUM
term TK_STR
term TK_TRUE
term TK_FALSE
term TK_NULL
term TK_THIS
term TK_IDENTIFIER term_sub_iden
term_sub_iden eps
term_sub_iden TK_BRACKO expression_list TK_BRACKC
term_sub_iden TK_DOT TK_IDENTIFIER TK_PARENO expression_list TK_PARENC
term TK_BRACKO TK_IDENTIFIER TK_BRACKC
term TK_PARENO expression TK_PARENC
term TK_MINUS term
term TK_NOT term
op TK_PLUS
op TK_MINUS
op TK_MULT
op TK_DIV
op TK_AND
op TK_OR
op TK_LE
op TK_GE
op TK_EQ
subroutine_call TK_IDENTIFIER subroutine_scope TK_PARENO expression_list TK_PARENC
subroutine_scope TK_DOT TK_IDENTIFIER
subroutine_scope eps
expression_list expression more_expressions
expression_list eps
more_expressions TK_COMMA expression more_expressions
more_expressions eps

num_terminals num_nonterminals num_productions index_start_symbol
'num_nonterminals' lines each having one string representing the non terminals
'num_productions' lines each having the follownig format: //convention to add space at the end of rule.
Non_Terminal Production
for example for S-ABC we have line entry as
'S A B C'
and for S-ABC|De we have two lines as:
S A B C
S D e